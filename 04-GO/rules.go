// 使用大小写决定 常量、变量、类型、接口、结构或函数 是否可以被外部包调用
// 函数名首字母 小写 即为 private
// 大写 即为 public
package main

// 声明多个变量
const (
	PI1    = 3.14
	const1 = "1"
)

// 全局声明必须有 var
var (
	// name = "stephen"
	age = 18
)

// 一般类型声明
type (
	//	newType int
	type1 float32
)

// func main() {
// 	局部声明多个值不能用 var(), 使用并行方式
//	a, b, c, d := 1, 2, 3, 4
// 	fmt.Println(PI1)
// }

// 1. 类型零值
// 零值不等于空值，而是变量被声明为某种类型的默认值
// 值类型默认值为 0, bool 为 false, string 为空字符串
// array [] 输出为 []

// 2. 类型转换
// go 不存在隐式转换，所有类型转换必须 显式声明
// 转换值能发生在两种相互兼容的类型之间
// 保证 go 是类型安全的语言

// 在两种相互兼容的两种类型之间进行转换
// var a float32 = 1.1
// b := int(a)
// 以下表达式无法通过编译
// var c bool = true
// d := int(c)

// var a int = 65
// b := string(a)
// 输出 b 为 A
// string 表示将数据转换成文本格式，因为计算机存储的任何东西本质都是数字，因此函数认为我们需要的是用数字 65 表示文本 A

// 3. 常量
// 常量的值在编译时就已经确定
// 常量里的表达式必须是常量

// iota 是常量的计数器，从 0 开始，组中每定义一个常量自动递增 1
// 每遇到 const 关键字， iota 会重置为 0
// const (
// 	// a 和 b 都是 "A"
// 	a = "A"
// 	b
// 	c = iota
// 	d
// 	// d 为 3
// )

// 星期枚举
// const (
// 	// 第一个常量不可省略表达式
// 	Monday = iota
// 	Tuesday
// 	Wednesday
// 	Thursday
// 	Friday
// 	Saturday
// 	Sunday
// )

// 4. 运算符
// 优先级(从高到低)
// ^ ! (一员运算符)
// * / % << >> & &^
// + - | ^ （二元运算符；两边都是数字的话，为 二元运算符）
// == != < <= >= >
// <- (专门用于 channel 并发通道)
// &&
// ||

/*
 6: 0110
11: 1011
......
&: 两个都是 1 则为 1， 否则为 0
& 0010 = 2

|: 两个为 0 则为 0，否则为 1
| 1111 = 15

^: 两个中其中一个为 1 则为 1，否则为 0
^ 1101 = 13

&^: 如果第二位数（11）是 1 则将第一位数（6）相同位置强制改为 0, 然后输出第一位更改后的内容
&^ 0100 = 4
*/

// 5. 指针
// 操作符 "&" 取变量地址，使用 "*" 通过指针间接访问目标对象
// 默认值为 nil 而非 NULL

// 递增递减语句
// 在 go 中， ++ 与 -- 是为语句而并不是表达式
// 即放在单独的一行，不能放在 = 右边
